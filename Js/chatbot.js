// Chatbot functionality
class Chatbot {
  constructor() {
    this.botResponses = [
      "Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c ·ª©ng d·ª•ng trong Traphaco Portal.",
      "B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ h·ªá th·ªëng HRM, Laboratory hay c√°c ·ª©ng d·ª•ng kh√°c?",
      "T√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n b·∫°n c√°ch s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng trong portal.",
      "B·∫°n c√≥ g·∫∑p kh√≥ khƒÉn g√¨ khi truy c·∫≠p v√†o c√°c h·ªá th·ªëng kh√¥ng?",
      "T√¥i s·∫Ω ghi nh·∫≠n ph·∫£n h·ªìi c·ªßa b·∫°n v√† chuy·ªÉn ƒë·∫øn b·ªô ph·∫≠n k·ªπ thu·∫≠t.",
      "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Traphaco Portal. C√≤n g√¨ t√¥i c√≥ th·ªÉ h·ªó tr·ª£?",
      "B·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ ƒë·ªÉ t√¥i h·ªó tr·ª£ t·ªët h∆°n kh√¥ng?",
      "T√¥i ƒëang h·ªçc h·ªèi ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám ng∆∞·ªùi d√πng. C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n!",
    ];

    this.init();
  }

  init() {
    this.createChatElements();
    this.bindEvents();
  }

  createChatElements() {
    // Create chatbot icon
    const chatbotIcon = document.createElement("div");
    chatbotIcon.className = "chatbot-icon";
    chatbotIcon.id = "chatbotIcon";
    chatbotIcon.innerHTML = `
            <svg viewBox="0 0 24 24">
                <path d="M12,2A2,2 0 0,1 14,4C14,4.74 13.6,5.39 13,5.73V7A1,1 0 0,1 12,8H11V10A1,1 0 0,1 10,11H9A1,1 0 0,1 8,10V9A1,1 0 0,1 9,8H10V7.73C9.4,7.39 9,6.74 9,6A2,2 0 0,1 11,4V2A2,2 0 0,1 12,2M21,9V10A1,1 0 0,1 20,11H19A1,1 0 0,1 18,10V9A1,1 0 0,1 19,8H20A1,1 0 0,1 21,9M16,11A1,1 0 0,1 17,12V13A1,1 0 0,1 16,14H15A1,1 0 0,1 14,13V12A1,1 0 0,1 15,11H16M10,15A1,1 0 0,1 11,16V17A1,1 0 0,1 10,18H9A1,1 0 0,1 8,17V16A1,1 0 0,1 9,15H10M7,12A2,2 0 0,1 9,14A2,2 0 0,1 7,16A2,2 0 0,1 5,14A2,2 0 0,1 7,12Z"/>
            </svg>
        `;

    // Create chat window
    const chatWindow = document.createElement("div");
    chatWindow.className = "chat-window";
    chatWindow.id = "chatWindow";
    chatWindow.innerHTML = `
            <div class="chat-header">
                <div class="bot-info">
                    <div class="bot-avatar">
                        <svg viewBox="0 0 24 24">
                            <path d="M12,2A2,2 0 0,1 14,4C14,4.74 13.6,5.39 13,5.73V7A1,1 0 0,1 12,8H11V10A1,1 0 0,1 10,11H9A1,1 0 0,1 8,10V9A1,1 0 0,1 9,8H10V7.73C9.4,7.39 9,6.74 9,6A2,2 0 0,1 11,4V2A2,2 0 0,1 12,2M21,9V10A1,1 0 0,1 20,11H19A1,1 0 0,1 18,10V9A1,1 0 0,1 19,8H20A1,1 0 0,1 21,9M16,11A1,1 0 0,1 17,12V13A1,1 0 0,1 16,14H15A1,1 0 0,1 14,13V12A1,1 0 0,1 15,11H16M10,15A1,1 0 0,1 11,16V17A1,1 0 0,1 10,18H9A1,1 0 0,1 8,17V16A1,1 0 0,1 9,15H10M7,12A2,2 0 0,1 9,14A2,2 0 0,1 7,16A2,2 0 0,1 5,14A2,2 0 0,1 7,12Z"/>
                        </svg>
                    </div>
                    <div>
                        <div class="bot-name">Traphaco Assistant</div>
                        <div class="bot-status">ƒêang tr·ª±c tuy·∫øn</div>
                    </div>
                </div>
                <button class="close-btn" id="closeChat">&times;</button>
            </div>

            <div class="chat-messages" id="chatMessages">
                <div class="message bot-message">
                    <div class="message-avatar">ü§ñ</div>
                    <div class="message-content">
                        Xin ch√†o! T√¥i l√† Traphaco Assistant. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ c√°c ·ª©ng d·ª•ng trong portal. B·∫°n c·∫ßn gi√∫p g√¨?
                    </div>
                </div>
            </div>

            <div class="typing-indicator" id="typingIndicator">
                <div class="message-avatar">ü§ñ</div>
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>

            <div class="chat-input-container">
                <div class="chat-input-group">
                    <input type="text" class="chat-input" id="chatInput" placeholder="Nh·∫≠p tin nh·∫Øn...">
                    <button class="send-btn" id="sendBtn">
                        <svg viewBox="0 0 24 24">
                            <path d="M2,21L23,12L2,3V10L17,12L2,14V21Z"/>
                        </svg>
                    </button>
                </div>
            </div>
        `;

    // Append to body
    document.body.appendChild(chatbotIcon);
    document.body.appendChild(chatWindow);

    // Store references
    this.chatbotIcon = document.getElementById("chatbotIcon");
    this.chatWindow = document.getElementById("chatWindow");
    this.closeChat = document.getElementById("closeChat");
    this.chatInput = document.getElementById("chatInput");
    this.sendBtn = document.getElementById("sendBtn");
    this.chatMessages = document.getElementById("chatMessages");
    this.typingIndicator = document.getElementById("typingIndicator");
  }

  bindEvents() {
    // Toggle chat window
    this.chatbotIcon.addEventListener("click", () => {
      this.chatWindow.classList.add("show");
      this.chatInput.focus();
    });

    this.closeChat.addEventListener("click", () => {
      this.chatWindow.classList.remove("show");
    });

    // Send message events
    this.sendBtn.addEventListener("click", () => this.sendMessage());

    this.chatInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        this.sendMessage();
      }
    });

    // Close chat when clicking outside
    document.addEventListener("click", (e) => {
      if (
        !this.chatWindow.contains(e.target) &&
        !this.chatbotIcon.contains(e.target)
      ) {
        this.chatWindow.classList.remove("show");
      }
    });

    // Auto-scroll new messages
    const observer = new MutationObserver(() => {
      this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    });

    observer.observe(this.chatMessages, {
      childList: true,
      subtree: true,
    });
  }

  sendMessage() {
    const message = this.chatInput.value.trim();
    if (message === "") return;

    // Add user message
    this.addMessage(message, "user");
    this.chatInput.value = "";

    // Show typing indicator
    this.showTypingIndicator();

    // Simulate bot response delay
    setTimeout(() => {
      this.hideTypingIndicator();
      const response = this.generateResponse(message);
      this.addMessage(response, "bot");
    }, 1000 + Math.random() * 2000);
  }

  generateResponse(userMessage) {
    const message = userMessage.toLowerCase();

    // Traphaco-specific responses
    if (message.includes("hrm") || message.includes("nh√¢n s·ª±")) {
      return "H·ªá th·ªëng HRM gi√∫p b·∫°n qu·∫£n l√Ω nh√¢n s·ª±, ch·∫•m c√¥ng, ngh·ªâ ph√©p v√† l∆∞∆°ng th∆∞·ªüng. B·∫°n c√≥ th·ªÉ truy c·∫≠p qua n√∫t 'Truy c·∫≠p' trong card HRM.";
    }

    if (message.includes("labo") || message.includes("laboratory")) {
      return "H·ªá th·ªëng Labo d√†nh cho Labo NC gi√∫p qu·∫£n l√Ω c√°c ho·∫°t ƒë·ªông nghi√™n c·ª©u. B·∫°n c·∫ßn quy·ªÅn truy c·∫≠p t·ª´ b·ªô ph·∫≠n Labo NC.";
    }

    if (message.includes("base") || message.includes("vƒÉn ph√≤ng")) {
      return "Base l√† h·ªá th·ªëng qu·∫£n l√Ω vƒÉn ph√≤ng chung cho t·∫•t c·∫£ ph√≤ng ban. B·∫°n c√≥ th·ªÉ truy c·∫≠p th√¥ng qua ƒëƒÉng nh·∫≠p Microsoft.";
    }

    if (message.includes("lalalab") || message.includes("ch·∫•t l∆∞·ª£ng")) {
      return "LalaLab l√† h·ªá th·ªëng qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng v√† s·∫£n xu·∫•t d√†nh cho Ph√≤ng qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng.";
    }

    if (message.includes("power bi") || message.includes("b√°o c√°o")) {
      return "Power BI gi√∫p x√¢y d·ª±ng b√°o c√°o v√† ph√¢n t√≠ch d·ªØ li·ªáu, ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi Ph√≤ng c√¥ng ngh·ªá th√¥ng tin.";
    }

    if (message.includes("ƒëƒÉng nh·∫≠p") || message.includes("login")) {
      return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Microsoft ƒë·ªÉ truy c·∫≠p portal. N·∫øu g·∫∑p l·ªói, vui l√≤ng li√™n h·ªá IT Support.";
    }

    if (message.includes("l·ªói") || message.includes("kh√¥ng v√†o ƒë∆∞·ª£c")) {
      return "T√¥i s·∫Ω ghi nh·∫≠n v·∫•n ƒë·ªÅ c·ªßa b·∫°n. Vui l√≤ng m√¥ t·∫£ chi ti·∫øt l·ªói ƒë·ªÉ t√¥i h·ªó tr·ª£ t·ªët h∆°n, ho·∫∑c li√™n h·ªá IT Support.";
    }

    // Default responses
    return this.botResponses[
      Math.floor(Math.random() * this.botResponses.length)
    ];
  }

  addMessage(text, sender) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${sender}-message`;

    const avatar = document.createElement("div");
    avatar.className = "message-avatar";
    avatar.textContent = sender === "user" ? "üë§" : "ü§ñ";

    const content = document.createElement("div");
    content.className = "message-content";
    content.textContent = text;

    messageDiv.appendChild(avatar);
    messageDiv.appendChild(content);

    this.chatMessages.appendChild(messageDiv);
    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
  }

  showTypingIndicator() {
    this.typingIndicator.style.display = "flex";
    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
  }

  hideTypingIndicator() {
    this.typingIndicator.style.display = "none";
  }
}

// Initialize chatbot when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
  new Chatbot();
});
